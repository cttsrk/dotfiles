# CTTSRK's TMUX CONFIG
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ 
# lives @ github.com/cttsrk/dotfiles

# setting "screen-256color" doesn't seem to work with truecolor below. However,
# "screen-256color" doesn't break home/end keys like "xterm-256color" does.
set -g default-terminal "xterm-256color"

set-option -ga terminal-overrides ",xterm-256color:Tc" # Enable truecolor.
set-option -g default-shell /bin/bash # Set the default shell.

# Don't wait for escape sequences. This might break some Function and Arrow
# keybinds on remotes sessions. Possibly 10ms is a better value there, but leave
# it at 0 for now.
set -sg escape-time 0

set -g repeat-time 0 # Disable repeat keybinds. They mess with my flow.
set-window-option -g mouse on # Enable mouse mark+copy, paste is <prefix>,] by default.
set-window-option -g automatic-rename # Enable automatic window renaming.
set -g renumber-windows # Enable automatic window renumbering.
set-window-option -g aggressive-resize # Try to follow window size.
set -g bell-action none     # No distractions.
set -g visual-bell off      # None.
unbind C-b # ctrl+b is taken in vim.
set -g prefix C-Space # Internet says this prefix doesn't mess with vim/shell.

# Start pane numbers from 1 istead of 0, don't want to reach too far.
set -g base-index 1

# Set a key to reload config.
bind-key r display "Reloading ~/.tmux.conf" \; source-file ~/.tmux.conf
bind-key C-r display "Reloading ~/.tmux.conf" \; source-file ~/.tmux.conf

# I'm lazy and don't want to release <Ctrl> before hitting the prefixed key.
bind-key c new-window # default binding
bind-key C-c new-window # add this so I can lazy
bind-key n next-window
bind-key C-n next-window
bind-key p previous-window
bind-key C-p previous-window
bind-key l last-window
bind-key C-l last-window
bind-key Enter set-option status
bind-key C-1 select-window -t :=1
bind-key C-2 select-window -t :=2
bind-key C-3 select-window -t :=3
bind-key C-4 select-window -t :=4
bind-key C-5 select-window -t :=5
bind-key C-6 select-window -t :=6
bind-key C-7 select-window -t :=7
bind-key C-8 select-window -t :=8
bind-key C-9 select-window -t :=9

# Rebind Home and End like this works around a bug where setting
# TERM="xterm-256color" breaks them (in tmux only, readline issue?).
bind-key -n Home send Escape "OH"
bind-key -n End send Escape "OF"



# STATUS BAR STYLING
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ 

set -g status-position top # of screen
set -g status-interval 30 # seconds

# See 'man strftime' for time format codes. "#H" is hostname in tmux.
set -g status-left ""
set -g status-right "#[fg=colour8]%H:%M"

# Set window tab text format to "NUMBER: WINDOWTITLE" with some spacing. The
# window title is decided by the active application itself, e.g. by bash or vim.
set -g window-status-current-format "#I #{=50:pane_title}\ \ \ "

# NOTE Why is there a u in colour, tmux?

set -g status-bg colour0   # ansi black
set -g status-fg colour11   # Active window on status bar.
set -g window-status-format "#[fg=colour8]#I #{=50:pane_title}\ \ \ " # inactive window

# HACK: If we are on WSL, assume the terminal emulator is cmd.exe and compensate
# accordingly. Cmd.exe circa 2018 does not support modifying index colors >= 16.
# "~/.color_terminal" knows about this and shuffles them to other indices.
# See github.com/microsoft/Terminal/issues/313 for more info.
if-shell "[ $(uname -r | grep Microsoft) ]" 'set -g status-bg colour10'
